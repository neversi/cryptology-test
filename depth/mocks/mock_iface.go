// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	depth "stock/updater/depth"
	models "stock/updater/models"

	gomock "github.com/golang/mock/gomock"
)

// MockDepth is a mock of Depth interface.
type MockDepth struct {
	ctrl     *gomock.Controller
	recorder *MockDepthMockRecorder
}

// MockDepthMockRecorder is the mock recorder for MockDepth.
type MockDepthMockRecorder struct {
	mock *MockDepth
}

// NewMockDepth creates a new mock instance.
func NewMockDepth(ctrl *gomock.Controller) *MockDepth {
	mock := &MockDepth{ctrl: ctrl}
	mock.recorder = &MockDepthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDepth) EXPECT() *MockDepthMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockDepth) Load() []models.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].([]models.Item)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockDepthMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockDepth)(nil).Load))
}

// SetOptions mocks base method.
func (m *MockDepth) SetOptions(opts depth.Options) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOptions", opts)
}

// SetOptions indicates an expected call of SetOptions.
func (mr *MockDepthMockRecorder) SetOptions(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOptions", reflect.TypeOf((*MockDepth)(nil).SetOptions), opts)
}

// Store mocks base method.
func (m *MockDepth) Store(arg0 []models.Item) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Store", arg0)
}

// Store indicates an expected call of Store.
func (mr *MockDepthMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockDepth)(nil).Store), arg0)
}

// Update mocks base method.
func (m *MockDepth) Update(arg0 models.Item) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0)
}

// Update indicates an expected call of Update.
func (mr *MockDepthMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDepth)(nil).Update), arg0)
}
